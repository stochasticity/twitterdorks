import datetime
import subprocess
import streamlit as st
import os
import time
import chromedriver_autoinstaller
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ---- Login Function ----
def login_to_x(username, password, mfa_code=None):
    chromedriver_autoinstaller.install()  # Auto-installs compatible chromedriver

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=options)

    try:
        driver.get("https://x.com/i/flow/login")
        wait = WebDriverWait(driver, 20)

        user_input = wait.until(EC.presence_of_element_located((By.NAME, "text")))
        user_input.send_keys(username)
        user_input.send_keys(Keys.ENTER)
        st.success("‚úÖ Username entered.")

        pass_input = wait.until(EC.presence_of_element_located((By.NAME, "password")))
        pass_input.send_keys(password)
        pass_input.send_keys(Keys.ENTER)
        st.success("‚úÖ Password entered.")

        if mfa_code:
            mfa_input = wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, "input[data-testid='ocfEnterTextTextInput']")))
            mfa_input.send_keys(mfa_code)
            mfa_input.send_keys(Keys.ENTER)
            st.success("‚úÖ MFA code entered.")

        time.sleep(5)

        cookies = driver.get_cookies()
        with open("cookies.txt", "w") as f:
            f.write("# Netscape HTTP Cookie File\n# Generated by Selenium Streamlit script\n\n")
            for cookie in cookies:
                f.write(
                    f"{cookie['domain']}\t"
                    f"{'TRUE' if cookie['domain'].startswith('.') else 'FALSE'}\t"
                    f"{cookie['path']}\t"
                    f"{'TRUE' if cookie.get('secure', False) else 'FALSE'}\t"
                    f"{int(cookie.get('expiry', 0))}\t"
                    f"{cookie['name']}\t"
                    f"{cookie['value']}\n"
                )

        driver.quit()
        return True

    except Exception as e:
        st.error(f"Login failed: {e}")
        driver.quit()
        return False

# ---- Download Function ----
def download_twitter_space(url):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_format = f"~/twitter_space_{timestamp}_%(uploader)s_%(upload_date)s_%(id)s.%(ext)s"

    command = [
        "yt-dlp",
        "--verbose",
        "--cookies", "cookies.txt",
        "--no-clean-info-json",
        "--write-comments",
        url,
        "-o", output_format
    ]

    st.code(" ".join(command), language="bash")

    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode == 0:
        st.success("‚úÖ Download successful.")
        st.text(f"Saved as: {output_format}")
    else:
        st.error("‚ùå Download failed.")
        st.text(result.stderr)
        with open("yt_dlp_error.log", "w") as log_file:
            log_file.write("YT-DLP Debug Information\n\n")
            log_file.write("Command:\n" + ' '.join(command) + "\n\n")
            log_file.write("STDERR:\n" + result.stderr)

# ---- Streamlit UI ----
st.set_page_config(page_title="TwitterX Spaces Downloader", page_icon="üéôÔ∏è")
st.title("üéôÔ∏è TwitterX Spaces Downloader")
st.caption("Download Twitter Spaces with yt-dlp + Selenium + Streamlit")

with st.form("login_form"):
    username = st.text_input("TwitterX Username", max_chars=100)
    password = st.text_input("TwitterX Password", type="password")
    mfa_code = st.text_input("MFA Code (if applicable)", max_chars=10)
    space_url = st.text_input("Twitter Space URL", placeholder="https://x.com/i/spaces/1YpKklAePYBGj")
    submit = st.form_submit_button("Login & Download")

if submit:
    if not username or not password or not space_url:
        st.warning("Please enter all required fields.")
    else:
        with st.spinner("Logging in and downloading space..."):
            if login_to_x(username, password, mfa_code):
                download_twitter_space(space_url)
