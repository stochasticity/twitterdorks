import asyncio
import getpass
import datetime
import subprocess
from playwright.async_api import async_playwright

async def login_to_x(username, password, mfa_code=None):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()
        page = await context.new_page()

        await page.goto("https://x.com/i/flow/login")

        try:
            await page.wait_for_selector("input[name='text']", timeout=20000)
            await page.fill("input[name='text']", username)
            await page.click("button:has-text('Next')")
            print("Username entered and Next button clicked.")
        except Exception as e:
            print("Error entering username or finding the Next button:", e)
            await browser.close()
            return False

        try:
            await page.wait_for_selector("input[name='password']", timeout=20000)
            await page.fill("input[name='password']", password)
            await page.click("button:has-text('Log in')")
            print("Password entered and Log in button clicked.")
        except Exception as e:
            print("Error entering password or finding the Log in button:", e)
            await browser.close()
            return False

        if mfa_code:
            try:
                mfa_input = await page.wait_for_selector("input[data-testid='ocfEnterTextTextInput']", timeout=120000)
                await mfa_input.fill(mfa_code)
                await page.click("button[data-testid='ocfEnterTextNextButton']")
                print("MFA code entered and Next button clicked.")
            except Exception as e:
                print("No MFA prompt detected or an error occurred:", e)

        await page.wait_for_timeout(5000)

        cookies = await context.cookies()
        with open("cookies.txt", "w") as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file is generated by the spaces downloader script.\n\n")
            for cookie in cookies:
                f.write(
                    f"{cookie['domain']}\t"
                    f"{'TRUE' if cookie['domain'].startswith('.') else 'FALSE'}\t"
                    f"{cookie['path']}\t"
                    f"{'TRUE' if cookie.get('secure', False) else 'FALSE'}\t"
                    f"{int(cookie['expires']) if cookie['expires'] else 0}\t"
                    f"{cookie['name']}\t"
                    f"{cookie['value']}\n"
                )

        print("Login process completed. Cookies saved in Netscape format.")
        await browser.close()
        return True

def download_twitter_space(url):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_format = f"~/twitter_space_{timestamp}_%(uploader)s_%(upload_date)s_%(id)s.%(ext)s"

    command = [
        "yt-dlp",
        "--verbose",
        "--cookies", "cookies.txt",
        "--no-clean-info-json",
        "--write-comments",
        url,
        "-o", output_format
    ]

    print("Running yt-dlp command:", ' '.join(command))

    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode == 0:
        print(f"Download successful. File saved as per output format: {output_format}")
    else:
        print("Error during download with yt-dlp")
        print("Command:", ' '.join(command))
        print("Return code:", result.returncode)
        print("Error output:", result.stderr)
        with open("yt_dlp_error.log", "w") as log_file:
            log_file.write("YT-DLP Debug Information\n")
            log_file.write("Command\n")
            log_file.write(' '.join(command) + "\n\n")
            log_file.write("STDERR\n")
            log_file.write(result.stderr)

def main():
    try:
        with open("cookies.txt", "r") as f:
            content = f.read()
            if "auth_token" in content:
                print("Valid cookies.txt file found. Skipping login.")
            else:
                print("Invalid cookies.txt file. Login required.")
                raise FileNotFoundError
    except FileNotFoundError:
        username = input("Enter your TwitterX username: ")
        password = getpass.getpass("Enter your TwitterX password: ")
        mfa_code = input("Enter the MFA code from your X app (if applicable): ")

        if not asyncio.run(login_to_x(username, password, mfa_code)):
            print("Login failed. Exiting.")
            return

    space_url = input("Enter the Twitter Space URL you want to download (e.g., https://x.com/i/spaces/1YpKklAePYBGj): ")
    print("\nContents of cookies.txt for verification:\n")
    with open("cookies.txt", "r") as f:
        print(f.read())

    print("Starting download with yt-dlp...")
    download_twitter_space(space_url)

if __name__ == "__main__":
    main()
